
import traceback

def send_email_on_failure(context):
    subject = f"Airflow - DAG {context['dag'].dag_id} Failed"
    body = f"The DAG {context['dag'].dag_id} has failed.\n\n"
    body += "<table border='1'>"
    body += "<tr><th>DAG Name</th><th>Failed Task ID</th><th>Log Link</th></tr>"
    body += f"<tr><td>{context['dag'].dag_id}</td><td>{context['task_instance'].task_id}</td><td><a href='file://{context['task_instance'].log_filepath}'>Log Link</a></td></tr>"
    body += "</table>\n\n"
    try:
        log_file_loc = context['task_instance'].log_filepath
        with open(log_file_loc, 'r') as log_file:
            log_contents = log_file.read()
        body += f"Error Message:\n\n{log_contents}"
        
        # Check if the error message contains the specific error you want to catch
        if 'File not parsed completely/correctly' in log_contents:
            send_email(['recipient1@example.com', 'recipient2@example.com', 'recipient3@example.com'], subject, body)
            return  # Exit the function after sending the email
            
    except Exception as e:
        body += f"Error Message could not be retrieved. Error: {str(e)}\n"
        body += f"Traceback:\n\n"
        traceback_lines = traceback.format_exc().splitlines()
        for line in traceback_lines[:10]:  # Capture only the first 10 lines of the traceback
            body += line + "\n"
    
    send_email(['recipient1@example.com', 'recipient2@example.com', 'recipient3@example.com'], subject, body)
