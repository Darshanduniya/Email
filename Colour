import markdown

def send_email_on_failure(context):

    subject = f"Airflow - DAG {context['dag'].dag_id} Failed"

    body = f"The DAG {context['dag'].dag_id} has failed.\n\nTask: {context['task_instance'].task_id}\n\n"

    try:

        log_file_loc = context['task_instance'].log_filepath

        with open(log_file_loc, 'r') as log_file:

            log_contents = log_file.read()

        error_message = "Error Message:\n\n"

        if 'traceback' in log_contents.lower():

            highlighted_error = log_contents.replace('traceback', '**traceback**')

            error_message += markdown.markdown(highlighted_error)

        else:

            error_message += log_contents.replace('\n', '\n\n')  # Add an extra newline after each line

        body += error_message

        if 'File not parsed completely/correctly' in log_contents:

            send_email(['recipient1@example.com', 'recipient2@example.com', 'recipient3@example.com'], subject, body)

            return

    except Exception as e:

        body += f"Error Message could not be retrieved. Error: {str(e)}\n"

        body += f"Traceback:\n\n{traceback.format_exc()}"

    send_email(['recipient1@example.com', 'recipient2@example.com', 'recipient3@example.com'], subject, body)
